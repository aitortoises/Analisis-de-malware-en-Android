import subprocess
import shutil
import sys
import os


def obtenerStringsFichero(fichero, string):

	f = open(salidaStrings, "a")

	try:
		f.write(" ### STRINGS '" + string + "' EN EL FICHERO '" + fichero + "':\n\n")
		files = subprocess.check_output("strings " + fichero + " | egrep \"" + string + "\"", shell=True)
		f.write(files)
	except:
		pass

	f.write("\n\n\n")
	f.close()


def obtenerStringsDirectorio(directorio, string):

	f = open(salidaStrings, "a")

	try:
		f.write(" ### STRINGS '" + string + "' EN EL DIRECTORIO '" + directorio + "':\n\n")
		files = subprocess.check_output("egrep -rin \"" + string + "\" " + directorio, shell=True)
		f.write(files)
	except:
		pass

	f.write("\n\n\n")
	f.close()


def obtenerNativo():

	libreriasNativas = list()

	try:
		result = subprocess.check_output("find " + outputZipDir + " | egrep '.so$'", shell=True)
		nativeLibraries.extend(result.split("\n"))
	except:
		print "No hay librerias nativas"

	f = open(salidaNativas, "w")
	for libreriaNativa in libreriasNativas:
		command = ""
		if "lib/armeabi" in libreriaNativa:
			command = "~/Android/android-ndk-r16b-linux-x86_64/android-ndk-r16b/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-objdump -d " + libreriaNativa

		elif "lib/mips" in libreriaNativa:
			command = "~/Android/android-ndk-r16b-linux-x86_64/android-ndk-r16b/toolchains/mipsel-linux-android-4.9/prebuilt/linux-x86_64/bin/mipsel-linux-android-objdump -d " + libreriaNativa

		elif "lib/x86" in libreriaNativa:
			command = "objdump -d " + libreriaNativa

		if command is not "":
			f.write(subprocess.check_output(command, shell=True) + "\n")

	f.close()


def obenerInformacion():

	os.makedirs(salidaOtros)

	os.system("unzip #ENTRADA# -d #SALIDA#".replace("#ENTRADA#", muestra).replace("#SALIDA#", salidaZip))
	
	os.system("java -jar ~/Escritorio/tools/apktool_2.3.4.jar d #ENTRADA# -o #SALIDA#".replace("#ENTRADA#", muestra).replace("#SALIDA#", salidaApktool))

	os.system("~/Escritorio/tools/jadx/build/jadx/bin/jadx #ENTRADA# -d #SALIDA#".replace("#ENTRADA#", muestra).replace("#SALIDA#", salidaJadx))

	os.system("keytool -printcert -file " + salidaZip + "/META-INF/*.RSA > " + salidaOtros + "/certificado.txt")

	if os.path.exists(ficheroDex):
		obtenerStringsFichero(ficheroDex, "https?:")
		obtenerStringsFichero(ficheroDex, "aHR0cDo|aHR0cHM6L") # base64
		obtenerStringsFichero(ficheroDex, "%68%74%74%70%3A%2F%2F|%68%74%74%70%73%3A%2F%2F") # hexa
		obtenerStringsFichero(ficheroDex, "L[^;]+?;")

	obtenerStringsDirectorio(salidaZip, "https?:")
	obtenerStringsDirectorio(salidaZip, "aHR0cDo|aHR0cHM6L") # base64
	obtenerStringsDirectorio(salidaZip, "%68%74%74%70%3A%2F%2F|%68%74%74%70%73%3A%2F%2F") # hexa


if __name__ == "__main__":

	directorio = os.getcwd() + "/"
	muestra = directorio + sys.argv[1]

	salidaOtros = directorio + "Otros"
	salidaZip = directorio + "Unzip"
	salidaApktool = directorio + "Apktool"
	salidaJadx = directorio + "Jadx"

	if os.path.exists(salidaOtros):
		shutil.rmtree(salidaOtros)

	if os.path.exists(salidaZip):
		shutil.rmtree(salidaZip)

	if os.path.exists(salidaApktool):
		shutil.rmtree(salidaApktool)

	if os.path.exists(salidaJadx):
		shutil.rmtree(salidaJadx)

	salidaStrings = salidaOtros + "/strings.txt"
	salidaNativas = salidaOtros + "/funcionesNativas.txt"
	ficheroDex = salidaZip + "/classes.dex"

	obenerInformacion()

	obtenerNativo()





